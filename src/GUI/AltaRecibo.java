/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import BD.Conexion;
import Clases.F_R;
import Clases.Factura;
import Clases.Proveedor;
import Clases.Recibo;
import Clases.tipoMoneda;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;

/**
 *
 * @author emiliano
 */
public class AltaRecibo extends javax.swing.JFrame {

    /**
     * Creates new form AltaRecibo
     */
    public AltaRecibo() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.jMenuBar1.setVisible(false);
        AutoCompleteDecorator.decorate(this.jCBProveedor);
        List<Proveedor> LProv = Conexion.getInstance().listadoProveedores();
        LProv.forEach((p) -> {
            if (!p.isDeshabilitado()) {
                this.jCBProveedor.addItem(p);
            }
        });
        this.jCBMoneda.setModel(new DefaultComboBoxModel(tipoMoneda.values()));

        this.jTableFacturas.getColumnModel().getColumn(5).setMinWidth(0);
        this.jTableFacturas.getColumnModel().getColumn(5).setMaxWidth(0);
        this.jTableFacturas.getColumnModel().getColumn(5).setWidth(0);

        DefaultTableModel model = (DefaultTableModel) this.jTableFacturas.getModel();
        model.setRowCount(0);
        List<Factura> ListaFactCredit = Conexion.getInstance().ListarFacturasCredito((Proveedor) this.jCBProveedor.getSelectedItem());
        for (int i = 0; i < ListaFactCredit.size(); i++) {
            String numeroComp = ListaFactCredit.get(i).getSerieComprobante() + "-" + ListaFactCredit.get(i).getNroComprobante();
            model.addRow(new Object[]{ListaFactCredit.get(i).getFecha().toString(),
                numeroComp, ListaFactCredit.get(i).getTotal(), ListaFactCredit.get(i).getPendiente(), 0, ListaFactCredit.get(i)});
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextSerie = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jTextImporte = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextComentario = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableFacturas = new javax.swing.JTable();
        jButtonIngresar = new javax.swing.JButton();
        jButtonCerrar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jCBMoneda = new javax.swing.JComboBox<>();
        jCBProveedor = new javax.swing.JComboBox<>();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jTextNumero = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuEdicion = new javax.swing.JMenu();
        jMenuItemModificar = new javax.swing.JMenuItem();
        jMenuItemEliminar = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Fecha");

        jLabel2.setText("Proveedor");

        jLabel3.setText("Numero");

        jTextSerie.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextSerieKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextSerieKeyTyped(evt);
            }
        });

        jLabel4.setText("Importe");

        jTextImporte.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextImporteKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextImporteKeyTyped(evt);
            }
        });

        jLabel5.setText("Comentario");

        jTextComentario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextComentarioKeyPressed(evt);
            }
        });

        jTableFacturas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Fecha", "Numero", "Importe", "Pendiente", "Entregar", "Objeto"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableFacturas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableFacturasKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTableFacturasKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTableFacturas);

        jButtonIngresar.setText("Ingresar");
        jButtonIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonIngresarActionPerformed(evt);
            }
        });

        jButtonCerrar.setText("Cerrar");
        jButtonCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCerrarActionPerformed(evt);
            }
        });

        jLabel6.setText("Moneda");

        jCBProveedor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBProveedorItemStateChanged(evt);
            }
        });
        jCBProveedor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCBProveedorKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jCBProveedorKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jCBProveedorKeyTyped(evt);
            }
        });

        jTextNumero.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextNumeroKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextNumeroKeyTyped(evt);
            }
        });

        jMenuEdicion.setText("Edici√≥n");

        jMenuItemModificar.setText("Modificar");
        jMenuItemModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemModificarActionPerformed(evt);
            }
        });
        jMenuEdicion.add(jMenuItemModificar);

        jMenuItemEliminar.setText("Deshabilitar");
        jMenuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEliminarActionPerformed(evt);
            }
        });
        jMenuEdicion.add(jMenuItemEliminar);

        jMenuBar1.add(jMenuEdicion);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonIngresar)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonCerrar))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextComentario, javax.swing.GroupLayout.PREFERRED_SIZE, 396, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel6))
                                .addGap(20, 20, 20))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCBProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(64, 64, 64)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(7, 7, 7)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jTextSerie, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextNumero))
                                    .addComponent(jTextImporte, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jCBMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextSerie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCBProveedor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jTextNumero, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(jLabel1)
                        .addComponent(jTextImporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBMoneda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextComentario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonIngresar)
                    .addComponent(jButtonCerrar))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_jButtonCerrarActionPerformed

    private void jCBProveedorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBProveedorItemStateChanged
        DefaultTableModel model = (DefaultTableModel) this.jTableFacturas.getModel();
        model.setRowCount(0);
        List<Factura> ListaFactCredit = Conexion.getInstance().ListarFacturasCredito((Proveedor) this.jCBProveedor.getSelectedItem());
        for (int i = 0; i < ListaFactCredit.size(); i++) {
            String numeroComp = ListaFactCredit.get(i).getSerieComprobante() + "-" + ListaFactCredit.get(i).getNroComprobante();
            model.addRow(new Object[]{ListaFactCredit.get(i).getFecha().toString(),
                numeroComp, ListaFactCredit.get(i).getTotal(), ListaFactCredit.get(i).getPendiente(), 0, ListaFactCredit.get(i)});
        }
    }//GEN-LAST:event_jCBProveedorItemStateChanged

    private void jButtonIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonIngresarActionPerformed
        if (this.jTextSerie.getText().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(null, "Debe ingresar la serie.");
        } else if (this.jTextNumero.getText().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(null, "Debe ingresar el numero del recibo.");
        } else if (this.jDateChooser.getDate() == null) {
            javax.swing.JOptionPane.showMessageDialog(null, "Debe ingresar la fecha del recibo.");
        } else if (this.jTextImporte.getText().isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(null, "Es necesario ingresar el importe total del recibo");
        } else {
            List<F_R> listaf_r = new ArrayList<F_R>();
            DefaultTableModel modelo = (DefaultTableModel) this.jTableFacturas.getModel();
            int facturas_linkeadas = 0;
            for (int i = 0; i < modelo.getRowCount(); i++) {
                String s = modelo.getValueAt(i, 4).toString();
                float saldo = Float.parseFloat(s);
                if (saldo > 0) {
                    facturas_linkeadas++;
                }
            }
            if (facturas_linkeadas == 0) {
                int resp = JOptionPane.showConfirmDialog(this, "No ha asignado ninguna factura al recibo ¬øContinuar igualmente?", "Confirmar", JOptionPane.YES_NO_OPTION);
                if (resp == 0) {
                    Recibo rec = new Recibo();
                    rec.setFecha(this.jDateChooser.getDate());
                    rec.setCotizacion(45);
                    if (this.jCBMoneda.getSelectedItem() == tipoMoneda.$U) {
                        rec.setMoneda(tipoMoneda.$U);
                    } else if (this.jCBMoneda.getSelectedItem() == tipoMoneda.US$) {
                        rec.setMoneda(tipoMoneda.US$);
                    }
                    rec.setSerieComprobante(this.jTextSerie.getText());
                    rec.setNroComprobante(Integer.parseInt(this.jTextNumero.getText()));
                    rec.setObservacion(this.jTextComentario.getText());
                    rec.setProveedor((Proveedor) this.jCBProveedor.getSelectedItem());
                    rec.setTotal(Integer.parseInt(this.jTextImporte.getText()));

                    for (int i = 0; i < modelo.getRowCount(); i++) {
                        String s = modelo.getValueAt(i, 4).toString();
                        float saldo = Float.parseFloat(s);
                        if (saldo > 0) {
                            F_R f_r = new F_R();
                            f_r.setRecibo(rec);

                            f_r.setSaldo(saldo);

                            Factura f = (Factura) this.jTableFacturas.getModel().getValueAt(i, 5);
                            float pendiente = f.getPendiente() - saldo;
                            f.setPendiente(pendiente);
                            f_r.setFactura(f);

                            listaf_r.add(f_r);
                        }
                    }
                    rec.setFr_s(listaf_r);

                    boolean recibo = Conexion.getInstance().persist(rec);
                    List<F_R> lf_r = rec.getFr_s();
                    for (int i = 0; i < lf_r.size(); i++) {
                        boolean fr = Conexion.getInstance().persist(lf_r.get(i));
                        if (!fr) {
                            javax.swing.JOptionPane.showMessageDialog(null, "Ha ocurrido un problema.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                        }
                    }
                    if (recibo) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Recibo ingreado correctamente.", "Enhorabuena", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                        this.dispose();
                    } else {
                        javax.swing.JOptionPane.showMessageDialog(null, "Ha ocurrido un problema.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                Recibo rec = new Recibo();
                rec.setFecha(this.jDateChooser.getDate());
                rec.setCotizacion(45);
                if (this.jCBMoneda.getSelectedItem() == tipoMoneda.$U) {
                    rec.setMoneda(tipoMoneda.$U);
                } else if (this.jCBMoneda.getSelectedItem() == tipoMoneda.US$) {
                    rec.setMoneda(tipoMoneda.US$);
                }
                rec.setSerieComprobante(this.jTextSerie.getText());
                rec.setNroComprobante(Integer.parseInt(this.jTextNumero.getText()));
                rec.setObservacion(this.jTextComentario.getText());
                rec.setProveedor((Proveedor) this.jCBProveedor.getSelectedItem());
                rec.setTotal(Integer.parseInt(this.jTextImporte.getText()));

                for (int i = 0; i < modelo.getRowCount(); i++) {
                    String s = modelo.getValueAt(i, 4).toString();
                    float saldo = Float.parseFloat(s);
                    if (saldo > 0) {
                        F_R f_r = new F_R();
                        f_r.setRecibo(rec);

                        f_r.setSaldo(saldo);

                        Factura f = (Factura) this.jTableFacturas.getModel().getValueAt(i, 5);
                        float pendiente = f.getPendiente() - saldo;
                        f.setPendiente(pendiente);
                        f_r.setFactura(f);

                        listaf_r.add(f_r);
                    }
                }
                rec.setFr_s(listaf_r);

                boolean recibo = Conexion.getInstance().persist(rec);
                List<F_R> lf_r = rec.getFr_s();
                for (int i = 0; i < lf_r.size(); i++) {
                    boolean fr = Conexion.getInstance().persist(lf_r.get(i));
                    if (!fr) {
                        javax.swing.JOptionPane.showMessageDialog(null, "Ha ocurrido un problema.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    }
                }
                if (recibo) {
                    javax.swing.JOptionPane.showMessageDialog(null, "Recibo ingreado correctamente.", "Enhorabuena", javax.swing.JOptionPane.INFORMATION_MESSAGE);
                    this.dispose();
                } else {
                    javax.swing.JOptionPane.showMessageDialog(null, "Ha ocurrido un problema.", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                }
            }
        }

    }//GEN-LAST:event_jButtonIngresarActionPerformed

    private void jMenuItemModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemModificarActionPerformed

    }//GEN-LAST:event_jMenuItemModificarActionPerformed

    private void jMenuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEliminarActionPerformed

    }//GEN-LAST:event_jMenuItemEliminarActionPerformed

    private void jTextNumeroKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextNumeroKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b' /*corresponde a BACK_SPACE*/)) {
            evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_jTextNumeroKeyTyped

    private void jTextImporteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextImporteKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b' /*corresponde a BACK_SPACE*/)) {
            evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_jTextImporteKeyTyped

    private void jTextSerieKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextSerieKeyTyped
        if (!Character.isLetter(evt.getKeyChar())) {
            evt.consume();
        } else if (this.jTextSerie.getText().length() > 0) {
            evt.consume();
        }

    }//GEN-LAST:event_jTextSerieKeyTyped

    private void jTextSerieKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextSerieKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.jTextNumero.requestFocus();
        }
    }//GEN-LAST:event_jTextSerieKeyPressed

    private void jTextNumeroKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextNumeroKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.jTextImporte.requestFocus();
        }
    }//GEN-LAST:event_jTextNumeroKeyPressed

    private void jCBProveedorKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBProveedorKeyPressed
//        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
//            this.jTextImporte.requestFocus();
//        }
    }//GEN-LAST:event_jCBProveedorKeyPressed

    private void jCBProveedorKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBProveedorKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBProveedorKeyTyped

    private void jCBProveedorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCBProveedorKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBProveedorKeyReleased

    private void jTextImporteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextImporteKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.jTextComentario.requestFocus();
        }
    }//GEN-LAST:event_jTextImporteKeyPressed

    private void jTextComentarioKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextComentarioKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            this.jButtonIngresar.requestFocus();
        }
    }//GEN-LAST:event_jTextComentarioKeyPressed

    private void jTableFacturasKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableFacturasKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b' /*corresponde a BACK_SPACE*/)) {
            evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_jTableFacturasKeyTyped

    private void jTableFacturasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableFacturasKeyPressed
        char caracter = evt.getKeyChar();
        if (((caracter < '0')
                || (caracter > '9'))
                && (caracter != '\b' /*corresponde a BACK_SPACE*/)) {
            evt.consume();  // ignorar el evento de teclado
        }
    }//GEN-LAST:event_jTableFacturasKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AltaRecibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AltaRecibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AltaRecibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AltaRecibo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AltaRecibo().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCerrar;
    private javax.swing.JButton jButtonIngresar;
    private javax.swing.JComboBox<String> jCBMoneda;
    private javax.swing.JComboBox<Proveedor> jCBProveedor;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuEdicion;
    private javax.swing.JMenuItem jMenuItemEliminar;
    private javax.swing.JMenuItem jMenuItemModificar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableFacturas;
    private javax.swing.JTextField jTextComentario;
    private javax.swing.JTextField jTextImporte;
    private javax.swing.JTextField jTextNumero;
    private javax.swing.JTextField jTextSerie;
    // End of variables declaration//GEN-END:variables
}
